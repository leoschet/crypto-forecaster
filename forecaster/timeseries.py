import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from statsmodels.tsa.stattools import adfuller, grangercausalitytests, kpss


def metrics(data):
    print('\nKpss test: ')
    # Stationary around a constant
    print(kpss(data, regression='c'))
    # Stationary around a trend
    print(kpss(data, regression='ct'))

    print('\nAdfuller test:')
    # Constant only
    print(adfuller(data, regression='c'))
    # Constant trend
    print(adfuller(data, regression='ct'))
    # Constant, and linear and quadratic trend
    print(adfuller(data, regression='ctt'))

def plot(dates, data, title='', ylabel=''):
    plt.plot(dates, data)
    plt.grid(True)
    plt.ylabel(title)
    plt.title(ylabel)
    plt.show()

def stationarize(timeserie, time_lag=10):
    """
    Transform the given time serie into stationary by normalizing, 
    using z-score, against the past 'time_lag' days
    """
    stationary_ts = [0] * timeserie.size
    for final_index in range(time_lag, timeserie.size, time_lag):
        start_index = final_index - time_lag
        stationary_ts[start_index:final_index] = stats.zscore(timeserie[start_index:final_index])

    if final_index != timeserie.size:
        stationary_ts[final_index:timeserie.size] = stats.zscore(timeserie[final_index:timeserie.size])
    
    return stationary_ts

def standardize_laggedly(timeseries, time_lag=10):
    standardized_ts = np.zeros(timeseries.size)
    standardized_ts[0:time_lag] = np.nan

    # Standardization against previous days
    for index in range(time_lag, timeseries.size):
        prev = index - time_lag
        mean = timeseries[prev:index].mean()
        std = timeseries[prev:index].std()
        standardized_ts[index] = np.divide(timeseries[index] - mean, std)

    # Transform infs into nans
    standardized_ts[abs(standardized_ts) == np.inf] = np.nan

    return standardized_ts
    
def first_differentiate(timeseries, use_log=False):
    stationary_ts = timeseries
    if use_log:
        # Calculate log
        stationary_ts = np.log(stationary_ts)

        # Log of negative numbers is nan
        # Log of 0 is -inf
        stationary_ts = stationary_ts.replace([np.inf, -np.inf, np.nan], 0)
    
    # Return first differentiated series
    return stationary_ts.diff()
        
# normalization_time_lag = 10
# d = [1094.99, 951.58, 1031.68, 1080.61, 1091.44, 992.26, 776.36, 730.1, 817.61, 897.54, 946.85, 873.03, 894.43, 881.59, 859.13, 808.14, 706.87, 623.38, 562.33, 694.1, 626.2, 624.07, 629.45, 663.41, 669.09, 702.13, 760.84, 734.62, 725.49, 742.42, 757.71, 760.91, 771.3, 811.47, 819.23, 864.65, 957.35, 939.27, 842.64, 843.84, 842.98, 888.05, 897.51, 857.75, 845.5, 834.26, 866.23, 845.19, 817.63, 837.4, 855.48, 874.82, 870.64, 853.58, 833.93, 805.12, 854.89, 887.98, 787.18, 825.6, 821.93, 822.31, 827.55, 846.43, 831.2, 809.57, 841.51, 815.39, 785.62, 715.76, 680.58, 687.89, 673.81, 662.36, 653.72, 614.82, 659.26, 648.36, 608.54, 624.95, 614.93, 622.34, 562.62, 568.16, 600.64, 594.46, 547.14, 529.19, 581, 579.03, 567.93, 565.62, 557.3, 662.28, 665, 655.51, 658.71, 627.36, 616.06, 637.04, 626.45, 629.08, 633.59, 639.1, 627.99, 629.35, 630.53, 622.9, 613.84, 610.04, 583.67, 578.36, 562.2, 564.25, 574.88, 563.9, 581.1, 512.9, 501.32, 497.05, 462.2, 457.6, 478.67, 449.1, 442.61, 447.95, 457.53, 460.37, 449.64, 450.79, 437.47, 386.66, 414.53, 422.03, 413.6, 465.45, 500.99, 518.77, 498.45, 481.16, 496.48, 498.76, 494.62, 489.03, 486.85, 481.38, 461.23, 457.93, 440.41, 439.29, 443.31, 446.22, 455.13, 448.08, 436.12, 434.63, 430.67, 427.55, 438.17, 438.25, 446.24, 451.43, 439.36, 438.87, 437.84, 443.26, 444.92, 446.33, 446.42, 444.9, 460.48, 478.49, 490.43, 517.66, 524.19, 535.36, 566.38, 581.56, 573.32, 571.84, 583.53, 607.55, 619.78, 637.66, 644.3, 660.72, 639.39, 654.25, 650.66, 652.67, 647.99, 649.14, 651.43, 637.21, 605.43, 593.12, 570.85, 576.37, 594.26, 602.02, 603.48, 599.77, 591.11, 591.8, 599.1, 587.56, 584.29, 566.76, 579.23, 596.02, 606.34, 596.2, 631.09, 646.47, 649.16, 638.62, 632.62, 629.67, 633.77, 623.46, 622.52, 623.51, 617.73, 628.09, 632.6, 625.94, 620.97, 621.6, 617.79, 621.45, 624.57, 627.44, 623.25, 620.22, 620.65, 612.94, 602.84, 600.16, 595.1, 592.2, 583.73, 582.82, 571, 578.48, 594.19, 587.64, 585.39, 587.23, 584.01, 583.18, 586.43, 590.94, 588.25, 589.48, 578.94, 555.19, 548.18, 515.44, 499.4, 510.15, 496.57, 465.59, 481.54, 504.05, 519.8, 512.16, 500.74, 507.97, 503.12, 510.97, 508.96, 509.12, 508.91, 502.63, 482.43, 478.48, 477.75, 476.97, 487.62, 483.33, 482.07, 482.93, 472.59, 470.93, 480.79, 475.53, 474.44, 478.16, 477.25, 473.9, 455.35, 454.89, 426.72, 398.59, 408.04, 402.66, 399.96, 425.2, 425.22, 410.39, 399.63, 400.86, 384.12, 376.68, 384.7, 373.14, 375.96, 362.11, 334.94, 315.09, 333.68, 331, 345.6, 366.31, 359.67, 366.33, 369.74, 383.29, 402.46, 392.54, 381.82, 380.69, 387.64, 388.46, 381.29, 378.31, 381.92, 362.39, 356.69, 348.43, 350.32, 352.32, 353.86, 340.2, 342.12, 336.23, 326.35, 324.45, 326.45, 327.98, 341.03, 346.86, 342.99, 344.23, 357.54, 374.76, 366.74, 413.77, 418.8, 396.8, 379.74, 386.74, 388.9, 376.57, 376.93, 361.7, 351.01, 355.25, 363.06, 378.3, 377.93, 369.61, 369.79, 375.03, 376.28, 377.59, 379.24, 381.39, 377.54, 372.21, 372.56, 375.12, 375.34, 365.7, 352.35, 348.02, 349.98, 352.15, 347.43, 351.11, 340.24, 330.69, 320.79, 312.43, 314.99, 326.96, 322.57, 330.07, 334.74, 325.19, 318.48, 326.1, 316.53, 316.67, 314.42, 309.81, 316.9, 315.23, 315.03, 293.11, 271.68, 271.39, 282.85, 293.46, 287.17, 278.13, 277.14, 268.93, 268.91, 234.63, 192.13, 208.79, 208.81, 200.21, 209.06, 215.72, 211.52, 220, 232.36, 232.38, 246.29, 250.55, 273.97, 261.86, 240.7, 232.02, 228.99, 223.65, 223.54, 230.6, 229.09, 226.62, 218.86, 222.08, 227.2, 223.57, 220.59, 219.78, 220.27, 221.35, 236.64, 251.7, 239.64, 234.86, 241.45, 237.79, 239.72, 243, 244.41, 237.8, 239.13, 238.4, 237.49, 236.25, 252.63, 257.25, 253.49, 267.96, 279.85, 275.94, 273.65, 273.22, 275.99, 275.01, 286.53, 292.42, 295.09, 294.94, 287.83, 282.82, 282.14, 290.83, 287.38, 265.06, 258.2, 260.33, 259.99, 265.45, 265.95, 250.16, 246.17, 249.6, 247.5, 252.13, 243.86, 247.6, 244.67, 245.31, 251.39, 253.7, 253.04, 257.89, 255.91, 254.27, 246.78, 240.83, 236.57, 236.38, 236.41, 227.79, 220.4, 222.02, 228.26, 223.66, 223.03, 225.62, 224.39, 229.94, 235.37, 235.27, 229.53, 227.86, 218.85, 224.7, 225.68, 228.85, 235.08, 234.19, 235.37, 240.72, 238.75, 236.09, 233.32, 235.98, 242.98, 241.63, 240.85, 242.35, 241.84, 240.56, 238.53, 237.88, 236.94, 237.05, 235.09, 234.29, 234.42, 235.84, 239.64, 239.79, 240.56, 237.99, 237.61, 237.62, 237.88, 235.22, 233.87, 231.75, 224.65, 225.62, 226.09, 225.45, 225.47, 226.07, 224.38, 228.58, 230.18, 229.69, 230.41, 231.01, 234.94, 234.14, 236.98, 246.68, 250.58, 248.16, 246.24, 244.8, 244.19, 246.66, 244.9, 242.2, 243.07, 242.98, 249, 251.31, 254.95, 262.37, 259, 256.05, 258.58, 259.03, 268.72, 271.16, 266.53, 274.68, 269.38, 285.13, 292.12, 307.26, 289.22, 289.16, 288.1, 279.14, 278.05, 275.93, 273.69, 277.54, 277.66, 276.76, 280.17, 286.01, 288.34, 291.47, 292.7, 291.9, 290.83, 287.88, 285.02, 281.18, 281.43, 282.55, 284.78, 282.66, 279.43, 275.92, 267.89, 264.02, 264.33, 268.01, 266.05, 264.91, 265.8, 263.84, 258.76, 252.11, 241.71, 230.14, 234.01, 233.09, 227.41, 228.45, 215.25, 219.01, 226.32, 226.6, 230.39, 230.08, 228.79, 230.45, 229.36, 229.03, 228.22, 230.52, 234.14, 240.17, 240.43, 243.59, 240.26, 239.02, 238.35, 236.7, 231.66, 230.23, 230.4, 229.78, 233.01, 233.06, 232.09, 231.68, 229.18, 230.49, 230.88, 234.34, 235.38, 235.73, 233.55, 238.39, 237.95, 237.2, 238.9, 237.91, 239.33, 239.55, 240.01, 245.88, 244.84, 243.91, 244.77, 245.82, 249.43, 246.25, 249.49, 253.14, 255.27, 264.73, 269.65, 264.74, 264.43, 270.15, 272.37, 273.89, 277.57, 281.75, 288.55, 293.23, 294.32, 302.13, 311.67, 326.27, 334.23, 320.98, 347.73, 392.01, 438.82, 393.37, 372.47, 384.45, 379.37, 378.42, 346.11, 314.08, 330.86, 334.88, 333.9, 325.14, 327.75, 335.44, 334.99, 329.2, 321.77, 326.15, 323.97, 323.24, 321.26, 335.8, 347.14, 357.35, 356.8, 366.64, 373.97, 364.56, 358.25, 362.24, 362.1, 388.16, 392.95, 394.58, 404.63, 416.85, 423.3, 444.94, 431.9, 436.16, 442.7, 461.23, 455.18, 454.77, 461.99, 461.95, 447.36, 437.06, 437.05, 442.7, 454.47, 446.76, 422.72, 420.68, 422.21, 429.29, 428.74, 428.85, 433.36, 433.36, 428.82, 435.9, 432.62, 430.49, 454.29, 453.71, 447.46, 447.29, 448.09, 442.4, 430.24, 416.78, 380.95, 381.85, 383.97, 384.97, 384.51, 409.94, 406.89, 386.5, 391.01, 400.44, 393.52, 393.96, 392.71, 381.27, 378.36, 378.5, 374.88]
# data = np.array(d)

# z_scores = stats.zscore(data)
# metrics(z_scores)
# plot(z_scores, 'Z-Score', 'Bitcoin price z-score')

# z_scores = stationarize(z_scores, normalization_time_lag)
# # z_scores = stationarize(data, normalization_time_lag)
# metrics(z_scores)
# plot(z_scores, 'Standardized against ' + str(normalization_time_lag) + ' last days', 'Bitcoin price z-score')
